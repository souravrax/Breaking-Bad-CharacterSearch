{"version":3,"sources":["components/Header.component.jsx","components/Character.jsx","components/Spinner.jsx","components/CharacterGrid.jsx","components/Search.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","Character","name","img","portrayed","nickname","birthday","status","Spinner","style","width","margin","display","CharacterGrid","items","isLoading","map","item","key","char_id","getQuery","useState","setText","type","placeholder","autoFocus","onChange","e","q","target","value","console","log","setItems","setIsLoading","query","setQuery","useEffect","a","Axios","result","data","fetchItems","Search","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kPAUeA,G,MARA,WACX,OACI,4BAAQC,UAAU,UACd,yBAAKC,IAAG,0FAA6FC,IAAI,Q,iBC0BtGC,MA7Bf,YAA0E,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,UAAWC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,OAC3D,OACI,yBAAKT,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKI,EAAKH,IAAI,eAEvB,yBAAKF,UAAU,aACX,4BAAKI,GACL,4BACI,4BACI,iDADJ,IACoCE,GAEpC,4BACI,+CADJ,IACkCC,GAElC,4BACI,+CADJ,IACkCC,GAElC,4BACI,6CADJ,IACkCC,QCN3CC,EAdC,WACZ,OACI,yBACIT,IAAI,6FACJC,IAAI,UACJS,MAAO,CACHC,MAAO,QACPC,OAAQ,OACRC,QAAS,YCMVC,MAZf,YAA8C,IAArBC,EAAoB,EAApBA,MACrB,OADyC,EAAbC,UAExB,kBAAC,EAAD,MAEI,6BAASjB,UAAU,SACdgB,EAAME,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eAAWC,IAAKD,EAAKE,SAAaF,SCRvC,cAAmB,IAAhBG,EAAe,EAAfA,SAAe,EACLC,mBAAS,IADJ,mBAChBC,GADgB,WAM7B,OACI,6BAASxB,UAAU,UACf,8BACI,2BACIyB,KAAK,OACLzB,UAAU,eACV0B,YAAY,oBACZC,WAAS,EACTC,SAAU,SAACC,GAZV,IAACC,IAaWD,EAAEE,OAAOC,MAZlCR,EAAQM,GACRR,EAASQ,GAYOG,QAAQC,IAAIL,EAAEE,OAAOC,aCX9B,aAAO,IAAD,EACOT,mBAAS,IADhB,mBACZP,EADY,KACLmB,EADK,OAEeZ,oBAAS,GAFxB,mBAEZN,EAFY,KAEDmB,EAFC,OAGOb,mBAAS,IAHhB,mBAGZc,EAHY,KAGLC,EAHK,KAenB,OAVAC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEACIC,IAAM,sDAAD,OAAuDJ,IADhE,OACXK,EADW,OAEjBP,EAASO,EAAOC,MAChBP,GAAa,GAHI,2CAAH,qDAKhBQ,KACC,CAACP,IAIF,6BACE,kBAAC,EAAD,MACA,kBAACQ,EAAD,CAAQvB,SAAU,SAACQ,GACjBQ,EAASR,MAEX,kBAAC,EAAD,CAAeb,UAAWA,EAAWD,MAAOA,M,MChB9B8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.517f1be3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"center\">\r\n            <img src={`https://github.com/bradtraversy/breaking-bad-cast/blob/master/src/img/logo.png?raw=true`} alt='' />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nfunction Character({ name, img, portrayed, nickname, birthday, status }) {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-inner\">\r\n                <div className=\"card-front\">\r\n                    <img src={img} alt=\"Character\" />\r\n                </div>\r\n                <div className=\"card-back\">\r\n                    <h1>{name}</h1>\r\n                    <ul>\r\n                        <li>\r\n                            <strong>Actor Name : </strong> {portrayed}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Nickname : </strong> {nickname}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Birthday : </strong> {birthday}\r\n                        </li>\r\n                        <li>\r\n                            <strong>Status : </strong> {  status }\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Character\r\n","import React from 'react'\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <img\r\n            src=\"https://github.com/bradtraversy/breaking-bad-cast/blob/master/src/img/spinner.gif?raw=true\"\r\n            alt=\"Loading\"\r\n            style={{\r\n                width: \"200px\",\r\n                margin: \"auto\",\r\n                display: \"block\",\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React from 'react'\r\nimport Character from './Character'\r\nimport Spinner from './Spinner'\r\n\r\nfunction CharacterGrid({ items, isLoading }) {\r\n    return isLoading ? (\r\n        <Spinner />\r\n    ) : (\r\n            <section className=\"cards\">\r\n                {items.map((item) => (\r\n                    <Character key={item.char_id} {...item} />\r\n                ))}\r\n            </section>\r\n        )\r\n}\r\n\r\nexport default CharacterGrid\r\n","import React, { useState } from 'react'\r\n\r\nexport default ({ getQuery }) => {\r\n    const [text, setText] = useState('');\r\n    const onChange = (q) => {\r\n        setText(q);\r\n        getQuery(q);\r\n    }\r\n    return (\r\n        <section className=\"search\">\r\n            <form>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Search Characters\"\r\n                    autoFocus\r\n                    onChange={(e) => {\r\n                        onChange(e.target.value);\r\n                        console.log(e.target.value);\r\n                    }}\r\n                />\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport '../styles/app.scss'\nimport Header from \"../components/Header.component\";\nimport Axios from 'axios';\nimport CharacterGrid from \"../components/CharacterGrid\";\nimport Search from '../components/Search'\n\nexport default () => {\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    const fetchItems = async () => {\n      const result = await Axios(`https://www.breakingbadapi.com/api/characters?name=${query}`);\n      setItems(result.data);\n      setIsLoading(false);\n    }\n    fetchItems();\n  }, [query]);\n\n\n  return (\n    <div>\n      <Header />\n      <Search getQuery={(q) => {\n        setQuery(q);\n      }} />\n      <CharacterGrid isLoading={isLoading} items={items} />\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './styles/index.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}